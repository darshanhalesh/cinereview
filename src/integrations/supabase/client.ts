// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = `https://${import.meta.env.VITE_SUPABASE_PROJECT_ID}.supabase.co`;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY;

// Debug logging to help identify authentication issues
console.log('Supabase Configuration:', {
  projectId: import.meta.env.VITE_SUPABASE_PROJECT_ID,
  url: SUPABASE_URL,
  hasKey: !!SUPABASE_PUBLISHABLE_KEY
});

// Validate environment variables
if (!import.meta.env.VITE_SUPABASE_PROJECT_ID || !import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY) {
  console.error('Missing Supabase environment variables:', {
    VITE_SUPABASE_PROJECT_ID: import.meta.env.VITE_SUPABASE_PROJECT_ID,
    VITE_SUPABASE_PUBLISHABLE_KEY: !!import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY
  });
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
  },
  global: {
    headers: {
      'X-Client-Info': 'cine-review-app',
    },
  },
});

// Add JWT token interceptor for debugging
supabase.auth.onAuthStateChange((event, session) => {
  if (event === 'SIGNED_IN' && session) {
    console.log('🔐 JWT Token received:', {
      userId: session.user.id,
      expiresAt: new Date(session.expires_at! * 1000),
      tokenType: session.token_type,
    });
  } else if (event === 'TOKEN_REFRESHED' && session) {
    console.log('🔄 JWT Token refreshed:', {
      userId: session.user.id,
      expiresAt: new Date(session.expires_at! * 1000),
    });
  } else if (event === 'SIGNED_OUT') {
    console.log('🚪 JWT Token cleared');
  }
});

// Export utility functions for JWT token management
export const getAuthToken = () => {
  return supabase.auth.getSession().then(({ data: { session } }) => session?.access_token);
};

export const isTokenValid = (token: string) => {
  try {
    // Basic JWT token validation (check if it's a valid JWT format)
    const parts = token.split('.');
    if (parts.length !== 3) return false;
    
    // Decode the payload to check expiration
    const payload = JSON.parse(atob(parts[1]));
    const now = Math.floor(Date.now() / 1000);
    
    return payload.exp > now;
  } catch {
    return false;
  }
};